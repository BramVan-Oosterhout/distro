################################################################################
################################ RESET PASSWORD TESTS ##########################

sub verify_resetPasswordOkay {
    my $this = shift;

    ## Need to create an account (else oopsnotwikiuser)
    ### with a known email address (else oopsregemail)

    $this->registerAccount();
    my $cUID =
      $this->{session}->{users}->getCanonicalUserID( $this->{new_user_login} );
    $this->assert( $this->{session}->{users}->userExists($cUID),
        " $cUID does not exist?" );
    my $newPassU = '12345';
    my $oldPassU = 1;         #force set
    $this->assert(
        $this->{session}->{users}->setPassword( $cUID, $newPassU, $oldPassU ) );
    $this->assert( $this->{session}->{users}
          ->checkPassword( $this->{new_user_login}, $newPassU ) );
    my @emails = $this->{session}->{users}->getEmails($cUID);
    $this->assert_str_equals( $this->{new_user_email}, $emails[0] );

    my $query = Unit::Request->new(
        {
            'LoginName' => [ $this->{new_user_login} ],
            'TopicName' => ['ResetPassword'],
            'action'    => ['resetPassword']
        }
    );

    $query->path_info( '/' . $this->{users_web} . '/UserRegistration' );
    $this->createNewFoswikiSession( $Foswiki::cfg{DefaultUserLogin}, $query );
    $this->{session}->net->setMailHandler( \&FoswikiFnTestCase::sentMail );

    try {
        $this->captureWithKey( register => $RP_UI_FN, $this->{session} );
    }
    catch Foswiki::AccessControlException with {
        my $e = shift;
        $this->assert( 0, $e->stringify );
    }
    catch Foswiki::OopsException with {
        my $e = shift;
        $this->assert_str_equals( $REG_TMPL,  $e->{template}, $e->stringify() );
        $this->assert_str_equals( "reset_ok", $e->{def},      $e->stringify() );
    }
    catch Error::Simple with {
        $this->assert( 0, shift->stringify() );
    }
    otherwise {
        $this->assert( 0, "expected an oops redirect" );
    };
    $this->assert_equals( 1, scalar(@FoswikiFnTestCase::mails) );
    my $mess = $FoswikiFnTestCase::mails[0];
    $this->assert_matches(
        qr/$Foswiki::cfg{WebMasterName} <$Foswiki::cfg{WebMasterEmail}>/,
        $mess->header('From') );
    $this->assert_matches( qr/.*\b$this->{new_user_email}/,
        $mess->header('To') );

    #lets make sure the password actually was reset
    $this->assert(
        !$this->{session}->{users}->checkPassword( $cUID, $newPassU ) );
    my @post_emails = $this->{session}->{users}->getEmails($cUID);
    $this->assert_str_equals( $this->{new_user_email}, $post_emails[0] );

    return;
}

sub verify_resetPasswordNoSuchUser {
    my $this = shift;

    # This time we don't set up the testWikiName, so it should fail.

    my $query = Unit::Request->new(
        {
            'LoginName' => [ $this->{new_user_wikiname} ],
            'TopicName' => ['ResetPassword'],
            'action'    => ['resetPassword']
        }
    );

    $query->path_info( '/.' . $this->{users_web} . '/UserRegistration' );
    $this->createNewFoswikiSession( $Foswiki::cfg{DefaultUserLogin}, $query );
    $this->{session}->net->setMailHandler( \&FoswikiFnTestCase::sentMail );

    try {
        $this->captureWithKey( register => $RP_UI_FN, $this->{session} );
    }
    catch Foswiki::AccessControlException with {
        my $e = shift;
        $this->assert( 0, $e->stringify );

    }
    catch Foswiki::OopsException with {
        my $e = shift;
        $this->assert_str_equals( $REG_TMPL, $e->{template}, $e->stringify() );
        $this->assert_str_equals( "reset_bad", $e->{def}, $e->stringify() );
    }
    catch Error::Simple with {
        $this->assert( 0, shift->stringify() );
    }
    otherwise {
        $this->assert( 0, "expected an oops redirect" );
    };
    $this->assert_equals( 0, scalar(@FoswikiFnTestCase::mails) );

    return;
}

sub verify_resetPasswordNeedPrivilegeForMultipleReset {
    my $this = shift;

    # This time we don't set up the testWikiName, so it should fail.

    my $query = Unit::Request->new(
        {
            'LoginName' =>
              [ $this->{test_user_wikiname}, $this->{new_user_wikiname} ],
            'TopicName' => ['ResetPassword'],
            'action'    => ['resetPassword']
        }
    );

    $query->path_info( '/.' . $this->{users_web} . '/UserRegistration' );
    $this->createNewFoswikiSession( $Foswiki::cfg{DefaultUserLogin}, $query );
    $this->{session}->net->setMailHandler( \&FoswikiFnTestCase::sentMail );

    try {
        $this->captureWithKey( register => $RP_UI_FN, $this->{session} );
    }
    catch Foswiki::AccessControlException with {
        my $e = shift;
        $this->assert( 0, $e->stringify );

    }
    catch Foswiki::OopsException with {
        my $e = shift;
        $this->assert_matches( qr/$Foswiki::cfg{SuperAdminGroup}/,
            $e->stringify() );
        $this->assert_str_equals( 'accessdenied', $e->{template} );
        $this->assert_str_equals( 'only_group',   $e->{def} );
    }
    catch Error::Simple with {
        $this->assert( 0, shift->stringify() );
    }
    otherwise {
        $this->assert( 0, "expected an oops redirect" );
    };
    $this->assert_equals( 0, scalar(@FoswikiFnTestCase::mails) );

    return;
}

# This test make sure that the system can't reset passwords
# for a user currently absent from .htpasswd
sub verify_resetPasswordNoPassword {
    my $this = shift;

    $this->registerAccount();

    my $query = Unit::Request->new(
        {
            'LoginName' => [ $this->{new_user_wikiname} ],
            'TopicName' => ['ResetPassword'],
            'action'    => ['resetPassword']
        }
    );

    $query->path_info( '/' . $this->{users_web} . '/ResetPassword' );
    my $fh;
    open( $fh, ">:encoding(utf-8)", $Foswiki::cfg{Htpasswd}{FileName} )
      || die $!;
    close($fh) || die $!;

    $this->createNewFoswikiSession( $Foswiki::cfg{DefaultUserLogin}, $query );
    $this->{session}->net->setMailHandler( \&FoswikiFnTestCase::sentMail );

    try {
        $this->captureWithKey( register => $RP_UI_FN, $this->{session} );
    }
    catch Foswiki::AccessControlException with {
        my $e = shift;
        $this->assert( 0, $e->stringify );

    }
    catch Foswiki::OopsException with {
        my $e = shift;
        $this->assert_str_equals( $REG_TMPL, $e->{template}, $e->stringify() );
        $this->assert_str_equals( "reset_bad", $e->{def}, $e->stringify() );
    }
    catch Error::Simple with {
        $this->assert( 0, shift->stringify() );
    }
    otherwise {
        $this->assert( 0, "expected an oops redirect" );
    };

    # If the user is not in htpasswd, there's can't be an email
    $this->assert_equals( 0, scalar(@FoswikiFnTestCase::mails) );
    @FoswikiFnTestCase::mails = ();

    return;
}
 
 
#test for TWikibug:Item3400
sub verify_resetPassword_NoWikiUsersEntry {
    my $this = shift;

    ## Need to create an account (else oopsnotwikiuser)
    ### with a known email address (else oopsregemail)

    $this->registerAccount();

    #Remove the WikiUsers entry - by deleting it :)
    my ($from) = Foswiki::Func::readTopic( $Foswiki::cfg{UsersWebName},
        $Foswiki::cfg{UsersTopicName} );
    my ($to) = Foswiki::Func::readTopic( $Foswiki::cfg{UsersWebName},
        $Foswiki::cfg{UsersTopicName} . 'DELETED' );
    $from->move($to);
    $from->finish();
    $to->finish();

    #force a reload to unload existing user caches, and then restart as guest
    $this->createNewFoswikiSession();

    $this->assert(
        !Foswiki::Func::topicExists(
            $Foswiki::cfg{UsersWebName},
            $Foswiki::cfg{UsersTopicName}
        )
    );

    my $cUID =
      $this->{session}->{users}->getCanonicalUserID( $this->{new_user_login} );
    $this->assert( $this->{session}->{users}->userExists($cUID),
        " $cUID does not exist?" );
    my $newPassU = '12345';
    my $oldPassU = 1;         #force set
    $this->assert(
        $this->{session}->{users}->setPassword( $cUID, $newPassU, $oldPassU ) );
    $this->assert( $this->{session}->{users}
          ->checkPassword( $this->{new_user_login}, $newPassU ) );
    my @emails = $this->{session}->{users}->getEmails($cUID);
    $this->assert_str_equals( $this->{new_user_email}, $emails[0] );

    my $query = Unit::Request->new(
        {
            'LoginName' => [ $this->{new_user_login} ],
            'TopicName' => ['ResetPassword'],
            'action'    => ['resetPassword']
        }
    );

    $query->path_info( '/' . $this->{users_web} . '/ResetPassword' );
    $this->createNewFoswikiSession( $Foswiki::cfg{DefaultUserLogin}, $query );
    $this->{session}->net->setMailHandler( \&FoswikiFnTestCase::sentMail );

    try {
        $this->captureWithKey( register => $RP_UI_FN, $this->{session} );
    }
    catch Foswiki::AccessControlException with {
        my $e = shift;
        $this->assert( 0, $e->stringify );
    }
    catch Foswiki::OopsException with {
        my $e = shift;
        $this->assert_str_equals( $REG_TMPL,  $e->{template}, $e->stringify() );
        $this->assert_str_equals( "reset_ok", $e->{def},      $e->stringify() );
    }
    catch Error::Simple with {
        $this->assert( 0, shift->stringify() );
    }
    otherwise {
        $this->assert( 0, "expected an oops redirect" );
    };
    $this->assert_equals( 1, scalar(@FoswikiFnTestCase::mails) );
    my $mess = $FoswikiFnTestCase::mails[0];
    $this->assert_matches(
        qr/$Foswiki::cfg{WebMasterName} <$Foswiki::cfg{WebMasterEmail}>/,
        $mess->header('From') );
    $this->assert_matches( qr/.*\b$this->{new_user_email}/,
        $mess->header('To') );

    #lets make sure the password actually was reset
    $this->assert(
        !$this->{session}->{users}->checkPassword( $cUID, $newPassU ) );
    my @post_emails = $this->{session}->{users}->getEmails($cUID);
    $this->assert_str_equals( $this->{new_user_email}, $post_emails[0] );

    return;
}

sub verify_resetEmailOkay {
    my $this = shift;

    ## Need to create an account (else oopsnotwikiuser)
    ### with a known email address (else oopsregemail)
    ### need to know the password too
    my $ret = $this->registerUserExceptionTwk( 'brian', 'Brian', 'Griffin',
        'brian@example.com' );
    $this->assert_null( $ret, "Simple rego should work" );

    my $uname =
      ( $Foswiki::cfg{Register}{AllowLoginName} ) ? 'brian' : 'BrianGriffin';
    my $cUID = $this->{session}->{users}->getCanonicalUserID($uname);
    $this->assert( $this->{session}->{users}->userExists($cUID),
        "new user created" );
    my $newPassU = '12345';
    my $oldPassU = 1;         #force set
    $this->assert(
        $this->{session}->{users}->setPassword( $cUID, $newPassU, $oldPassU ) );
    my $newEmail = 'brian@family.guy';

    my $query = Unit::Request->new(
        {
            'LoginName'   => [$uname],
            'TopicName'   => ['ChangeEmailAddress'],
            'username'    => [$uname],
            'oldpassword' => ['12345'],
            'email'       => [$newEmail],
            'action'      => ['changePassword']
        }
    );

    $query->path_info( '/' . $this->{users_web} . '/WebHome' );
    $this->createNewFoswikiSession( $uname, $query );
    $this->{session}->net->setMailHandler( \&FoswikiFnTestCase::sentMail );
    try {
        $this->captureWithKey( manage => $MAN_UI_FN, $this->{session} );
    }
    catch Foswiki::AccessControlException with {
        my $e = shift;
        $this->assert( 0, $e->stringify );
    }
    catch Foswiki::OopsException with {
        my $e = shift;
        $this->assert_str_equals( $REG_TMPL, $e->{template}, $e->stringify() );
        $this->assert_str_equals( "email_changed", $e->{def}, $e->stringify() );
        $this->assert_str_equals(
            $newEmail,
            ${ $e->{params} }[0],
            ${ $e->{params} }[0]
        );
    }
    catch Error::Simple with {
        $this->assert( 0, shift->stringify() );
    }
    otherwise {
        $this->assert( 0, "expected an oops redirect" );
    };

    my @emails = $this->{session}->{users}->getEmails($cUID);
    $this->assert_str_equals( $newEmail, $emails[0] );

    return;
}

