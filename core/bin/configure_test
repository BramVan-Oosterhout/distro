#!/usr/bin/perl
# Simple test script for the baseline Configure classes, also useful#
# for testing .spec changes.
#
# Run from the lib/Foswiki/Configure directory.
#
# Reads the .spec (including configured plugins) and, if it is error free,
# LocalSite.cfg, do other stuff.
#
# *THIS IS NOT A FINISHED WORK* is is a test framework; edit it and
# add the functions you want to call. As it is checked in, it will
# simply call the checkers and report.

use strict;

use lib '../lib';

$ENV{FOSWIKI_ASSERTS} = 1;

use JSON;

require Assert;

require Foswiki::Configure::Root;
require Foswiki::Configure::LoadSpec;
require Foswiki::Configure::Load;
require Foswiki::Configure::Reporter;
require Foswiki::Configure::Checker;
require Foswiki::Configure::Wizard;

my $query;
my $params;
if ($ENV{HTTP_HOST}) {
    require CGI;
    eval "use CGI::Carp ('fatalsToBrowser')";
    die $@ if $@;
    $query = new CGI;
    $params = $query->Vars;
    print $query->header('text/html');
    print $query->start_html();
} else {
    $params = {};
    foreach my $p (@ARGV) {
        if ($p =~ /^([^=]+?)=(.*)$/) {
            $params->{$1} = $2;
        } else {
            $params->{$p} = 1;
        }
    }
}

{
    package CheckVisitor;

    sub new {
        my ($class, $method, $reporter) = @_;
        return bless({ method => $method,
                     reporter => $reporter }, $class);
    }

    sub startVisit {
        my ( $this, $visitee ) = @_;

        return 1 unless ( $visitee->isa('Foswiki::Configure::Value') );

        my $checker = Foswiki::Configure::Checker::loadChecker( $visitee );

        if ($checker) {
            my $reporter = $this->{reporter};
            my $x = eval "\$Foswiki::cfg$visitee->{keys}";
            if (ref($x)) {
                $x = Data::Dumper->Dump([$x]);
                $x =~ s/\$.*?= //;
                $x =~ s/;\s*$//s;
            }

            my $meth = $this->{method};
            $reporter->NOTE("---++ $visitee->{keys}");
            $checker->$meth($reporter, "$x");
        }

        return 1;
    }

    sub endVisit {
        my ( $this, $visitee ) = @_;

        return 1;
    }
}

my $root = Foswiki::Configure::Root->new();
Foswiki::Configure::LoadSpec::readSpec($root);

#$Foswiki::Configure::LoadSpec::RAW_VALS = 1;
#$Foswiki::Configure::LoadSpec::FIRST_SECTION_ONLY = 1;
my $reporter = Foswiki::Configure::Reporter->new();
my $ok = 1;
if (@Foswiki::Configure::LoadSpec::errors) {
    foreach my $e (@Foswiki::Configure::LoadSpec::errors) {
        $reporter->ERROR( join(' ', @$e ) );
    }
    $ok = 0;
}
if (@Foswiki::Configure::LoadSpec::warnings) {
    foreach my $e (@Foswiki::Configure::LoadSpec::warnings) {
        $reporter->WARN( join(' ', @$e ) );
    }
}
Foswiki::Configure::Load::readConfig();

if ($ok) {
    if ($params->{method}) {
        $reporter->NOTE("METHOD: ".$params->{method});
        my $check_visitor = CheckVisitor->new($params->{method}, $reporter);
        $root->visit($check_visitor);
    } elsif ($params->{wizard}) {
        my $wiz = Foswiki::Configure::Wizard::loadWizard($params->{wizard});
        $reporter->NOTE("WIZARD: " . $params->{wizard});
        print $wiz->execute($reporter);
    } else {
        $reporter->ERROR("Nothing to do");
    }
}
if ($query) {
    print $reporter->html();
} else {
    print $reporter->text() ."\n";
}
print $query->end_html() if $query;

1;
