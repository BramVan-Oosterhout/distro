#! /usr/bin/perl
# Shell access to Foswiki.spec, Config.spec and LocalSite.cfg
# See bottom of file for POD documentation.
#
# Author: Crawford Currie http://c-dot.co.uk
#
# Foswiki - The Free and Open Source Wiki, http://foswiki.org/
#
# Copyright (C) 2013-2014 Foswiki Contributors. Foswiki Contributors
# are listed in the AUTHORS file in the root of this distribution.
# NOTE: Please extend that file, not this notice.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version. For
# more details read LICENSE in the root of this distribution.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# As per the GPL, removal of this notice is prohibited.

use warnings;
use strict;

use Getopt::Long;
use Pod::Usage   ();
use Data::Dumper ();
use JSON         ();

# Assume we are in the tools dir, and we can find bin and lib from there
use FindBin ();
$FindBin::Bin =~ /^(.*)$/;
my $bin = $1;

use lib "$FindBin::Bin/../bin";
use lib "$FindBin::Bin/../lib";

use Assert;

require Foswiki::Configure::Root;
require Foswiki::Configure::LoadSpec;
require Foswiki::Configure::Load;
require Foswiki::Configure::Reporter;
require Foswiki::Configure::Query;

# Command-line parameter handling

my $params = {
    keys   => [],
    method => 'check_current_value',
    set    => {},
};

my %actions;

sub _keys {
    my ( $name, $val ) = @_;
    push( @{ $params->{keys} }, $val ) if defined $val && length($val);
    $actions{$name} = 1;
}

sub _scalar {
    my ( $name, $val ) = @_;
    $params->{$name} = $val;
    $actions{$name} = 1;
}

my $result = Getopt::Long::GetOptions(
    'check_current_value:s' => \&_keys,
    'dependencies'          => sub {
        $params->{check_dependencies} = 1;
    },
    'depth=i',
    \&_scalar,
    'getcfg:s'   => \&_keys,
    'getspec:s%' => sub {
        my ( $name, $key, $val ) = @_;
        $actions{$name} = 1;
        if ( defined $key ) {
            $params->{get}->{keys} = $key;
        }
    },
    'help' => sub {
        Pod::Usage::pod2usage( -exitstatus => 0, -verbose => 2 );
    },
    'json'     => \&_scalar,
    'method=s' => \&_scalar,
    'search=s' => \&_scalar,
    'save'     => \&_scalar,
    'set=s%'   => \%{ $params->{set} },
    'trace'    => \&_scalar,
    'wizard=s' => \&_scalar,
);

# Check parameters

my $action;
my %uniq;
my @methods =
  grep { defined &{"Foswiki::Configure::Query::$_"} }
  grep { $_ =~ /^[a-z]/ }
  keys %Foswiki::Configure::Query::;

foreach my $a (@methods) {
    if ( $actions{$a} ) {
        $action = $a;
        $uniq{$a} = 1;
    }
}

if ( scalar( keys %uniq ) > 1 ) {
    print STDERR "Only one of "
      . join( ' ', map { $_ =~ /(\w+)$/; "-$1" } keys %uniq )
      . " allowed\n";
    exit 1;
}

if ( !scalar( keys %uniq ) && !$actions{save} ) {
    print STDERR "Nothing to do\n";
    exit 1;
}

if ( $action =~ /^get/ && scalar( keys %{ $params->{set} } ) ) {
    print STDERR "-set doesn't work with -$action\n";
    exit 1;
}

if ( $params->{save} ) {
    delete $params->{save};
    $params->{wizard} = 'Save';
    $params->{method} = 'save';
}

=begin TML

---++ Prompt for config values
   * $root - Configuration root
   * $keys - ={Configuration}{Key}{Path}= to a single variable
   * $default - Default if any,  undef to require a response.
   * $prompts - Alternate prompt. If undef, the help text from the configuration spec is used.
   * $opt - Flag for optional values.   Optional values can have an "empty" reponse, Pressing enter will save a "null", and the keyword 'none' will omit setting the option.

=cut

sub _prompt {
    my ( $root, $keys, $default, $prompt, $opt ) = @_;
    print "\n";

    if ($prompt) {
        print $prompt;
    }
    else {
        my $vob = $root->getValueObject($keys);
        if ( $vob && $vob->{desc} ) {
            print "$vob->{desc}\n";
        }
    }

    print "\n";
    local $/ = "\n";
    my $reply;
    while ( !defined $reply ) {
        print $keys;
        print " ($default)" if defined $default;
        print ': ';
        $reply = <STDIN>;
        chomp($reply);
        $reply ||= $default;
        last if $opt;
    }
    if ( $keys eq '{Password}' && $reply ) {
        $reply = _setPassword( 'admin', $reply );
    }
    return if ( $opt && $reply eq 'none' );
    eval "\$Foswiki::cfg$keys='$reply'";
    if ($@) {
        print STDERR "Failed to set $keys: "
          . Foswiki::Configure::Reporter::stripStacktrace($@);
    }
}

sub _setPassword {
    my ( $login, $passwd ) = @_;
    my $salt = '$apr1$';
    my @saltchars = ( '.', '/', 0 .. 9, 'A' .. 'Z', 'a' .. 'z' );
    require Crypt::PasswdMD5;
    foreach my $i ( 0 .. 7 ) {

        # generate a salt not only from rand() but also mixing
        # in the users login name: unecessary
        $salt .= $saltchars[
          (
              int( rand( $#saltchars + 1 ) ) +
                $i +
                ord( substr( $login, $i % length($login), 1 ) ) )
          % ( $#saltchars + 1 )
        ];
    }
    return Crypt::PasswdMD5::apache_md5_crypt( $passwd,
        substr( $salt, 0, 14 ) );
}

sub _reply {
    my $response = shift;

    if ($response) {
        my $json      = JSON->new->convert_blessed(1);
        my $json_text = $json->encode($response);
        if ( $params->{json} ) {
            print "$json_text\n";
        }
        else {
            my $data = $json->decode($json_text);
            local $Data::Dumper::Indent = 2;
            my $perl_text = Data::Dumper->Dump( [$data] );
            $perl_text =~ s/^(\$VAR1 = |        )//gm;
            $perl_text =~ s/;$//s;
            print $perl_text;
        }
    }
}

#$Foswiki::Configure::LoadSpec::RAW_VALS = 1;

# Initialise

if ( Foswiki::Configure::Load::readConfig( 0, 0, 0 ) ) {
    $Foswiki::cfg{isVALID} = 1;
}

my $root     = Foswiki::Configure::Root->new();
my $reporter = Foswiki::Configure::Reporter->new();
Foswiki::Configure::LoadSpec::readSpec( $root, $reporter );
if ( $reporter->has_level('errors') ) {
    print STDERR $reporter->stringify( 'errors', 'warnings' ) . "\n";
    exit 1;
}

unless ( $Foswiki::cfg{isVALID} ) {
    %Foswiki::cfg = ();
    print STDERR "LocalSite.cfg load failed\n"
      . Foswiki::Configure::Reporter::stripStacktrace($@);

    # Run the bootstrap process. This guesses all the critical path settings.
    Foswiki::Configure::Load::bootstrapConfig();

    print "** Enter values for critical configuration items.\n";
    print
      "** type a new value or hit return to accept the value in brackets.\n";
    _prompt( $root, '{DefaultUrlHost}', 'http://localhost' );
    _prompt( $root, '{ScriptUrlPath}',  '/foswiki/bin' );
    _prompt(
        $root,
        '{ScriptUrlPaths}{view}',
        undef,
'Enter optional short URL for view script, Press enter for shortest URLs,  Enter "none" to use full URLs.',
        1
    );
    _prompt( $root, '{PubUrlPath}', '/foswiki/pub' );

    eval 'use Crypt::PasswdMD5';
    unless ($@) {
        _prompt( $root, '{Password}', undef,
            "Enter a password for the 'admin' sudo account.\n" );
        push( @{ $Foswiki::cfg{BOOTSTRAP} }, '{Password}' );
    }
    else {
        print
"*** Unable to set password - Module Crypt::PasswdMD5 is not available\n";
    }

    print
" The following directory settings have been guessed.  Press enter to confirm each setting:\n";

    _prompt( $root, '{ScriptDir}',    $Foswiki::cfg{ScriptDir} );
    _prompt( $root, '{ScriptSuffix}', $Foswiki::cfg{ScriptSuffix}, undef, 1 );
    _prompt( $root, '{DataDir}',      $Foswiki::cfg{DataDir} );
    _prompt( $root, '{PubDir}',       $Foswiki::cfg{PubDir} );
    _prompt( $root, '{TemplateDir}',  $Foswiki::cfg{TemplateDir} );
    _prompt( $root, '{LocalesDir}',   $Foswiki::cfg{LocalesDir} );
    _prompt( $root, '{WorkingDir}',   $Foswiki::cfg{WorkingDir} );
    _prompt( $root, '{ToolsDir}',     $Foswiki::cfg{ToolsDir} );

}

if ( $reporter->has_level('errors') ) {
    print STDERR $reporter->stringify( 'errors', 'warnings' ) . "\n";
    exit 1;
}

print $reporter->stringify();

# Perform the action

if ($action) {
    $action = "Foswiki::Configure::Query::$action";
    no strict 'refs';

    #print STDERR Data::Dumper->Dump([$params], [$action]);
    my $response = &$action( $params, $reporter );
    use strict 'refs';

    _reply($response);
}

if ( $actions{save} ) {

    # -save is functionally equivalent to -wizard Save -method save
    # (except of course you can have another wizard call)
    if ( $reporter->has_level('errors') ) {
        print STDERR "Save aborted due to errors\n"
          . $reporter->stringify( 'errors', 'warnings' );
        exit 1;
    }
    $reporter         = Foswiki::Configure::Reporter->new();
    $params->{wizard} = 'Save';
    $params->{method} = 'save';
    my $response = Foswiki::Configure::Query::wizard( $params, $reporter );

    _reply($response);
}

1;
__END__

=head1 tools/configure

Shell interface for Foswiki.spec, Config.spec and LocalSite.cfg

=head1 SYNOPSIS

 tools/configure [options]

Use -search, -getspec and -getcfg to explore the configuration.

Use -check, -wizard and -method to perform actions.

Use -save to save a new configuration.

Use -json and -trace to control the output of this script.

=head1 OPTIONS

=over 8

=item B<-json>

If set then results will be output in JSON format rather than the
default serialised perl format.

=item B<-check> [key|section]

Call checkers for the given key or section.
No key|section means check all keys. You can have as many B<-check>
options as you want.

=item B<-getcfg> [key]

Report the value of key. B<-getcfg> can be given
as many times as you like to retrieve the values of several keys.
Without a value, the option returns the value of all
known keys.

=item B<-getspec> [key|section]

Get the Config.spec for a key or an entire section.
No key|section will return the entire spec.
Only the last B<-getspec> option will be processed.

=item B<-method> name

If B<-wizard> is given, this is the name of the
wizard method to call (defaults to execute()). If B<-wizard> is not
given then B<-method> is interpreted as the name of a checker
method to call. The method will be called on all keys passed
using B<-check>.

=item B<-save>

Save a new configuration, with all items set using B<-set> (or set
by a B<-wizard> call). Checkers are not run unless explicitly requested
by B<-check>.

=item B<-search> what

Search headlines and keys for a fragment of text.
Returns the path(s) to the item(s) matched.

=item B<-set> key=value

Set the value of a key for B<-check>, B<-wizard> and B<-save>. You
can have as many B<-set> options as you want. B<-set> options are
applied before any checkers or wizards are run, but will not
persist unless B<-save> is specified. The value is expected to be
a perl value - be careful about quotes, to pass a string value
from the shell requires double quoting e.g.
 -set {ScriptSuffix}='".pl"'

=item B<-trace>

Switch on limited tracing (mainly for debugging, traces are added to
reports)

=item B<-wizard> name

Wizard to call. You can only call a single wizard.

=back

=head1 EXAMPLES

 $ configure -check {PubDir} -method validate_permissions

will call validate_permissions() for the {PubDir} checker.

 $ configure -check Extensions

will call check_current_value() for all keys under the Extensions section.

 $ configure -method check_current_value

will call the check_current_value() method for all leaf items
in the .spec.

 $ configure -wizard GuessSSLCaLocations -save

will call execute() from Foswiki::Configure::Wizards::GuessSSLCaLocations
and save the resulting Foswiki::cfg.

 $ configure -wizard Email -method send_test_email

will call send_test_email() from Foswiki::Configure::Wizards::Email
and report the results.

 $ configure -set {ScriptSuffix}="'.pl'" -set {MainWebName}="'Users'" -save

will set the values of {ScriptSuffix} and {MainWebName} and save a new
configuration.
