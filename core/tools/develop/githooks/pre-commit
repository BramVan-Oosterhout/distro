#!/usr/bin/perl
# See bottom of file for license and copyright information

use strict;
use warnings;

# Pick up BuildContrib version of Perl::Tidy
#  SMELL:  This works because the pre-commit runs in the root of the checkout
#  Assumes that BuildContrib is always available.

use lib 'BuildContrib/lib';

use Perl::Tidy;
use Text::Diff;
use File::Spec;

# PRE-COMMIT CLIENT HOOK for Foswiki git
#
# The pre-commit hook tests that the all perl files are tidy.
#
# STDERR ends up on the users' terminal

# PLEASE keep this message in sync with
# http://foswiki.org/Development/SvnRepository#RulesForCheckins

my $failmsg = '';

sub fail {
    my $message = shift;
    print STDERR <<"EOF";
--------------------------------------------------------------
Illegal checkin to Foswiki git repo:

=======
$message=======

http://foswiki.org/Development/SvnRepository#RulesForCheckins

Rule: - checkin must have "tidied" source code if the TIDY control file in the
root of the extension calls for it, see: http://foswiki.org/Development/TIDY

NB Getting rejected commits with perltidy? We are checking
   using version Perl::Tidy $Perl::Tidy::VERSION
   See http://foswiki.org/Development/PerlTidy#Versions
--------------------------------------------------------------
EOF
    exit 1;
}

# Verify that code is cleanly formatted, but only for files which were not
# removed, and end in .pm or .pl, and are not CPAN libraries
my %tidyOption;

# Returns undef when file should be skipped,
# otherwise returns perltidy options to be used (can be empty for defaults)
sub getTidyOptions {
    my $file = shift;
    return undef unless $file =~ /\.p[ml]$/;    # Only perl files
    return undef if $file =~ m#/lib/CPAN/lib/#; # Not CPAN modules
    return $tidyOption{$file} if exists $tidyOption{$file};

    my $tidyOptions = undef;                    # Defaults to skip
    my ( $volume, $directory ) = File::Spec->splitpath($file);
    my @pathList;    # Save examined hierarchy to update cache
    my @path = File::Spec->splitdir($directory);
    while ( defined pop @path ) {
        my $path = File::Spec->catdir(@path);
        $tidyOptions = $tidyOption{$path} and last if exists $tidyOption{$path};
        push @pathList, $path;    # To update cache hierachy
        my $tidyFile = File::Spec->catpath( $volume, $path, 'TIDY' );
        open( my $fh, '<', $file ) or die("Unable to open file");
        my @tidyOptions = <$fh>;
        close $fh;
        if ( $? == 0 ) {          # Found a TIDY file, check its content
            $tidyOptions = '';    # Defaults to check
            for (@tidyOptions) {
                if (/^(?:perl\s+)OFF$/) {
                    $tidyOptions = undef;
                    last;
                }
                if (/^perl\s*(.*)$/) {
                    $tidyOptions = $1;
                    last;
                }
            }
            last;
        }
    }

    # Update cache for the entire paths
    for my $path (@pathList) {
        $tidyOption{$path} = $tidyOptions;
    }

    return $tidyOption{$file} = $tidyOptions;
}

my @files = split( "\n", `git diff-index --cached --name-only HEAD` );
foreach my $file (@files) {
    check_perltidy($file);
}

sub check_perltidy {
    my $file = shift;

    my $tidyOptions = getTidyOptions($file);
    return unless defined $tidyOptions;

    print STDERR "Checking tidy for $file\n";

    open( my $fh, '<', $file ) or die("Unable to open file");
    my @input = <$fh>;
    close $fh;

    my @tidyed;
    perltidy(
        source      => \@input,
        destination => \@tidyed,
        argv        => $tidyOptions,
    );
    my $diff = diff( \@input, \@tidyed );
    $failmsg .= "$file is not tidy; cannot check in:\n$diff" if $diff;
}

fail($failmsg) if ($failmsg);

exit 0;
__END__
Foswiki - The Free and Open Source Wiki, http://foswiki.org/

Copyright (C) 2014 Foswiki Contributors. Foswiki Contributors
are listed in the AUTHORS file in the root of this distribution.
NOTE: Please extend that file, not this notice.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version. For
more details read LICENSE in the root of this distribution.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

As per the GPL, removal of this notice is prohibited.


