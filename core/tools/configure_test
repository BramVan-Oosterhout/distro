#!/usr/bin/perl
# Simple test script for the baseline Configure classes, also useful#
# for testing .spec changes.
#
# Run from the lib/Foswiki/Configure directory.
#
# Reads the .spec (including configured plugins) and, if it is error free,
# LocalSite.cfg, do other stuff.
#

use constant USAGE => <<USAGE;
Usage:
    configure_test
Options:
    checker= - keys (or section) to check. No value means "check all keys"
    wizard= - wizard to call
    method= - method to call (checkers default co check_current_value(),
              wixards to execute())

Examples:

$ configure_test checker={PubDir} method=validate_permissions

will call validate_permissions() for the {PubDir} checker.

$ configure_test checker=Extensions

will call check_current_value() for all keys under the Extensions section.

$ configure_test method=check_current_value

will call the check_current_value() method for all leaf items
in the .spec.

$ configure_test wizard=GuessSSLCaLocations

will call execute() from Foswiki::Configure::Wizards::ClomClomp
and report the results.

$ configure_test wizard=Email method=send_test_email

will call send_test_email() from Foswiki::Configure::Wizards::Email
and report the results.
USAGE

use strict;

use lib '../lib';

$ENV{FOSWIKI_ASSERTS} = 1;

use JSON;

require Assert;

require Foswiki::Configure::Root;
require Foswiki::Configure::LoadSpec;
require Foswiki::Configure::Load;
require Foswiki::Configure::Reporter;
require Foswiki::Configure::Checker;
require Foswiki::Configure::Wizard;

# For each key in the spec missing from the %cfg passed, add the
# default (unexpanded) from the spec to the %cfg, if it exists.
sub _addSpecDefaultsToCfg {
    my ( $spec, $cfg ) = @_;
    if ( $spec->{children} ) {
        foreach my $child ( @{ $spec->{children} } ) {
            _addSpecDefaultsToCfg( $child, $cfg );
        }
    }
    else {
        if ( exists( $spec->{default} )
            && eval("!exists(\$cfg->$spec->{keys})") )
        {
            # {default} stores a value string. Convert it to the
            # value suitable for storing in cfg
            my $value = $spec->decodeValue( $spec->{default} );
            if ( defined $value ) {
                eval("\$cfg->$spec->{keys}=\$value");
            }
            else {
                eval("undef \$cfg->$spec->{keys}");
            }
        }
    }
}

my $params = {};
unless (@ARGV) {
    print STDERR USAGE;
    exit 1;
}

foreach my $p (@ARGV) {
    if ( $p =~ /^([^=]+?)=(.*)$/ ) {
        $params->{$1} = $2;
    }
    else {
        $params->{$p} = 1;
    }
}

unless ( scalar( keys %$params ) ) {
    $params->{method} = 'check_current_value';
}

sub _prompt {
    my ( $root, $keys, $default ) = @_;
    my $vob = $root->getValueObject($keys);
    if ( $vob && $vob->{desc} ) {
        print "$vob->{desc}\n";
    }
    local $/ = "\n";
    my $reply = '';
    while ( !$reply ) {
        print $keys;
        print " ($default)" if defined $default;
        print ': ';
        $reply = <STDIN>;
        chomp($reply);
        $reply ||= $default;
    }
    eval "\$Foswiki::cfg$keys='$reply'";
    die $@ if $@;
}

my $root = Foswiki::Configure::Root->new();
Foswiki::Configure::LoadSpec::readSpec($root);

#$Foswiki::Configure::LoadSpec::RAW_VALS = 1;
#$Foswiki::Configure::LoadSpec::FIRST_SECTION_ONLY = 1;
my $reporter = Foswiki::Configure::Reporter->new();
my $ok       = 1;
if (@Foswiki::Configure::LoadSpec::errors) {
    foreach my $e (@Foswiki::Configure::LoadSpec::errors) {
        $reporter->ERROR( join( ' ', @$e ) );
    }
    $ok = 0;
}
if (@Foswiki::Configure::LoadSpec::warnings) {
    foreach my $e (@Foswiki::Configure::LoadSpec::warnings) {
        $reporter->WARN( join( ' ', @$e ) );
    }
}

if ( Foswiki::Configure::Load::readConfig( 0, 0, 0 ) ) {
    $Foswiki::cfg{isVALID} = 1;
}
else {
    %Foswiki::cfg = ();
    eval 'require Foswiki::Plugins::ConfigurePlugin';
    die
      "LocalSite.cfg load failed, and ConfigurePlugin could not be loaded: $@"
      if $@;
    eval "require FindBin";
    die "Could not load FindBin to support configuration recovery: $@"
      if $@;
    FindBin::again();    # in case we are under mod_perl or similar
    $FindBin::Bin =~ /^(.*)$/;
    my $bin = $1;
    print "** Enter values for critical configuration items.\n";
    print
      "** type a new value or hit return to accept the value in brackets.\n";
    _prompt( $root, '{DefaultUrlHost}', 'http://localhost' );
    _prompt( $root, '{ScriptUrlPath}' );
    _prompt( $root, '{PubUrlPath}' );
    _prompt( $root, '{ScriptDir}',      "$bin/../bin" );
    _prompt( $root, '{DataDir}',        "$bin/../pub" );
    _prompt( $root, '{PubDir}',         "$bin/../pub" );
    _prompt( $root, '{TemplateDir}',    "$bin/../templates" );
    _prompt( $root, '{LocalesDir}',     "$bin/../locale" );
    _prompt( $root, '{WorkingDir}',     "$bin/../working" );
    _prompt( $root, '{ToolsDir}',       $bin );
    Foswiki::Configure::Load::readConfig( 0, 0, 1 );
    $Foswiki::cfg{isVALID}         = 1;
    $Foswiki::cfg{isBOOTSTRAPPING} = 1;
}

if ($ok) {
    if ( exists $params->{checker} ) {

        $params->{checker} ||= '';

        _addSpecDefaultsToCfg( $root, \%Foswiki::cfg );

        my %check = ();

        my $vob = $root->getValueObject( $params->{checker} );

        if ($vob) {
            $check{ $params->{checker} } = 1;
        }
        else {
            $vob = $root->getSectionObject( $params->{checker} );
            if ($vob) {
                map { $check{$_} = 1 } $vob->getAllValueKeys();
            }
            else {
                die "$params->{checker} was not found";
            }
        }

        foreach my $k ( keys %check ) {
            my $vob     = $root->getValueObject($k);
            my $checker = Foswiki::Configure::Checker::loadChecker($vob);
            next unless $checker;

            my $x = eval "\$Foswiki::cfg$checker";
            if ( ref($x) ) {
                $x = Data::Dumper->Dump( [$x] );
                $x =~ s/\$.*?= //;
                $x =~ s/;\s*$//s;
            }

            my $meth = $params->{method} || 'check_current_value';
            die "Checker for $vob->{keys} does not define $meth"
              unless $checker->can($meth);

            my $reporter = Foswiki::Configure::Reporter->new();
            $checker->$meth($reporter);
            foreach my $line ( split /\n/, $reporter->text() ) {
                print "$meth $vob->{keys}: $line\n";
            }
        }
    }
    elsif ( $params->{wizard} ) {

        # Call wizard method

        my $wiz =
          Foswiki::Configure::Wizard::loadWizard( $params->{wizard}, $params );
        my $meth = $params->{method} || 'execute';
        print "--- Running $params->{wizard}\::$meth\n";

        my $reporter = Foswiki::Configure::Reporter->new();
        print $wiz->$meth($reporter);
        print $reporter->text() . "\n";

    }
    else {
        print STDERR "Nothing to do\n" . USAGE;
        exit 1;
    }
}

1;
